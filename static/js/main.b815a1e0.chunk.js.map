{"version":3,"sources":["components/Winner/cat.svg","components/Winner/dog.svg","components/Dog/Dog.js","components/Cat/Cat.js","components/Winner/Winner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dog","fetchImg","fetch","url","then","response","json","data","status","setState","img","message","catch","error","console","handleClick","props","win","state","this","className","alt","src","onClick","React","Component","Cat","headers","length","Winner","winner","dog","cat","App","handleWin","type","catScore","round","animateFighters","dogScore","dogRef","current","catRef","createRef","content","onAnimationEnd","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b815a1e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.b38a9e9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/dog.9944c85c.svg\";","import React from \"react\";\nimport \"./Dog.css\";\n\nclass Dog extends React.Component {\n  constructor() {\n    super();\n    this.url = \"https://dog.ceo/api/breeds/image/random\";\n    this.state = {\n      img: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.fetchImg();\n  }\n\n  fetchImg = () => {\n    fetch(this.url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        if (data.status === \"success\") {\n          this.setState({ img: data.message });\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  handleClick = () => {\n    this.props.win(\"dog\");\n  };\n\n  render() {\n    return (\n      <div className=\"dog\">\n        <img alt=\"dog\" src={this.state.img} />\n        <button className=\"btn btn-bright\" onClick={this.handleClick}>\n          WOOF!\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Dog;\n","import React from \"react\";\nimport \"./Cat.css\";\n\nclass Cat extends React.Component {\n  constructor() {\n    super();\n    this.url = \"https://api.thecatapi.com/v1/images/search\";\n    this.state = {\n      img: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.fetchImg();\n  }\n  fetchImg = () => {\n    fetch(this.url, {\n      headers: {\n        \"x-api-key\": \"a1a3b061-902e-4030-b023-7196c53f195c\",\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        if (data.length > 0 && data[0].url) {\n          this.setState({ img: data[0].url });\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n  handleClick = () => {\n    this.props.win(\"cat\");\n  };\n  render() {\n    return (\n      <div className=\"cat\">\n        <img alt=\"cat\" src={this.state.img} />\n        <button className=\"btn btn-bright\" onClick={this.handleClick}>\n          MEOW!\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Cat;\n","import React from \"react\";\nimport \"./Winner.css\";\nimport cat from \"./cat.svg\";\nimport dog from \"./dog.svg\";\n\nclass Winner extends React.Component {\n  render() {\n    let winner = (\n      <>\n        <h1>Woof Wins!</h1>\n        <img alt=\"dog\" src={dog} />\n      </>\n    );\n    if (this.props.winner === \"cat\") {\n      winner = (\n        <>\n          <h1>Meow Wins!</h1>\n          <img alt=\"cat\" src={cat} />\n        </>\n      );\n    }\n\n    return <div className=\"winner\">{winner}</div>;\n  }\n}\n\nexport default Winner;\n","import React from \"react\";\nimport \"./App.css\";\nimport Dog from \"./components/Dog/Dog\";\nimport Cat from \"./components/Cat/Cat\";\nimport Winner from \"./components/Winner/Winner\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      round: 1,\n      catScore: 0,\n      dogScore: 0,\n      animateFighters: \"animate-fighters\",\n    };\n    this.dogRef = React.createRef();\n    this.catRef = React.createRef();\n  }\n\n  handleWin = (type = \"dog\") => {\n    if (type === \"cat\") {\n      this.setState((state) => ({\n        catScore: state.catScore + 1,\n        round: state.round + 1,\n        animateFighters: \"animate-fighters\",\n      }));\n    } else {\n      this.setState((state) => ({\n        dogScore: state.dogScore + 1,\n        round: this.state.round + 1,\n        animateFighters: \"animate-fighters\",\n      }));\n    }\n    this.setState({\n      round: this.state.round + 1,\n    });\n    this.dogRef.current.fetchImg();\n    this.catRef.current.fetchImg();\n  };\n\n  render() {\n    let content = (\n      <>\n        <div className=\"header\">\n          <h1>Choose Your Fighter!</h1>\n          <h1>Round {this.state.round}</h1>\n        </div>\n        <div\n          className={`fighters ${this.state.animateFighters}`}\n          onAnimationEnd={() => this.setState({ animateFighters: \"\" })}\n        >\n          <Dog ref={this.dogRef} win={this.handleWin} />\n          <Cat ref={this.catRef} win={this.handleWin} />\n        </div>\n      </>\n    );\n    if (this.state.round === 4) {\n      let winner = \"dog\";\n      if (this.state.catScore > this.state.dogScore) {\n        winner = \"cat\";\n      }\n      content = <Winner winner={winner} />;\n    }\n    return <div className=\"app\">{content}</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}